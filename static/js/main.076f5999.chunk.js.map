{"version":3,"sources":["Components/Selector.js","Components/PageNotFound.js","Scripts/date.js","Scripts/weatherAPI.js","Components/SelectCityMessage.js","Components/Day.js","Components/Week.js","Components/Header.js","App.js","routes.js","index.js"],"names":["withRouter","props","useState","cities","setCities","searchCities","setSearchCities","showList","setShowList","useEffect","fetch","then","response","json","className","placeholder","onFocus","onChange","event","param","target","value","searchCitiesArray","length","forEach","city","toLowerCase","match","push","map","onClick","coord","history","location","pathname","lon","lat","catch","error","console","log","close","selectCity","PageNotFound","DAYS","MONTHS","getCoords","searchParams","params","URLSearchParams","get","getCityName","Promise","resolve","reject","coords","cityData","name","getWeather","mode","weather","current","weekWeather","daily","splice","SelectCityMessage","dayWeather","setDayWeather","cityName","setCityName","loading","setLoading","search","finally","dateString","time","date","Date","getDay","getDate","getMonth","getFullYear","join","getDayDate","dt","src","icon","alt","Math","round","temp","humidity","feels_like","description","setWeekWeather","day","getWeekDate","floor","min","max","showSelector","setShowSelector","to","path","component","Week","Day","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.076f5999.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport {withRouter} from \"react-router-dom\"\r\nfunction Selector(props) {\r\n    const [cities, setCities] = useState(null)\r\n    const [searchCities, setSearchCities] = useState(null)\r\n    const [showList, setShowList] = useState(null)\r\n    useEffect(() => {\r\n        fetch(\"cities.json\").then(response=>(response.json())).then(cities=>{setCities(cities)})\r\n    }, [])\r\n    let selectCities=(event)=>{\r\n        let param=event.target.value\r\n        let searchCitiesArray=[]\r\n        if(param.length>2 && cities){\r\n            cities.forEach(city=>{\r\n                if(city.toLowerCase().match(param.toLowerCase())){\r\n                    searchCitiesArray.push(city)\r\n                }\r\n            })\r\n        }\r\n        setSearchCities(searchCitiesArray)\r\n    }\r\n    let selectCity=(city)=>{\r\n        fetch(\r\n            `https://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=b4f88a6f724b0b945af35f393ab4d22a`\r\n        )\r\n        .then(response=>response.json())\r\n        .then(coord=>{\r\n            props.history.push(props.location.pathname+\"?lon=\"+coord[0].lon+\"&lat=\"+coord[0].lat)\r\n        }).catch(error=>{console.log(error);})\r\n        setShowList(false)\r\n        props.close()\r\n    }\r\n\r\n\r\n    let inputRef=React.createRef()\r\n    return (\r\n        <div className=\"selector\">\r\n            <input placeholder=\"Введите название города(больше 2 букв)\" className=\"selector__search\" onFocus={()=>{setShowList(true)}} onChange={selectCities}></input>    \r\n            {searchCities?.length>0&&showList&&<ul className=\"selector__cities-list\">\r\n                {searchCities.map(city=>{\r\n                    return <li className=\"selector__cities-item\" onClick={()=>{selectCity(city)}}>{city}</li>\r\n                })}\r\n            </ul>}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default withRouter(Selector)","import React from 'react'\r\n\r\nexport default function PageNotFound() {\r\n    return (\r\n        <div className=\"page-message\">\r\n            Страница не найдена\r\n        </div>\r\n    )\r\n}\r\n","const DAYS = [\"Sunday\",\"Monday\", \"Tuesday\", \"Wednesday\",\r\n        \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\r\nconst MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\nexport const getDayDate=(time)=>{\r\n    let date=new Date(time*1000)\r\n    let dateString=[\r\n        DAYS[date.getDay()],\r\n        date.getDate(),\r\n        MONTHS[date.getMonth()],\r\n        date.getFullYear()\r\n    ].join(\" \")\r\n    return dateString\r\n}\r\nexport const getWeekDate=(time)=>{\r\n    let date=new Date(time*1000)\r\n\r\n    return [DAYS[date.getDay()],date.getDate(),MONTHS[date.getMonth()]]\r\n}","export const getCoords=(searchParams)=>{\r\n    let params = new URLSearchParams(searchParams);\r\n    let lat = params.get(\"lat\"); \r\n    let lon = params.get(\"lon\");\r\n    if(lat&&lon){\r\n        return {lat:lat,lon:lon}\r\n    }else{\r\n        return null\r\n    }\r\n}\r\nexport const getCityName=(searchParams)=>{\r\n    return new Promise((resolve,reject)=>{\r\n        const coords=getCoords(searchParams)\r\n        if(coords){\r\n            fetch(\r\n                `http://api.openweathermap.org/geo/1.0/reverse?lat=${coords.lat}&lon=${coords.lon}&appid=b4f88a6f724b0b945af35f393ab4d22a`\r\n            ).then(response=>{\r\n                return response.json()\r\n            }).then(cityData=>{\r\n                resolve(cityData[0].name)\r\n            })\r\n        }else(\r\n            reject(\"ошибка\")\r\n        )\r\n    })\r\n}\r\nexport const getWeather=(searchParams,mode)=>{\r\n    return new Promise((resolve,reject)=>{\r\n        let coords = getCoords(searchParams)\r\n        if(coords){\r\n            fetch(\r\n                `https://api.openweathermap.org/data/2.5/onecall?lat=${coords.lat}&lon=${coords.lon}&units=metric&exclude=minutely,alerts,hourly&appid=b4f88a6f724b0b945af35f393ab4d22a`\r\n            ).then(response => {\r\n                return response.json()\r\n            }).then(weather => {\r\n                if(mode==\"day\"){\r\n                    resolve(weather.current)\r\n                }\r\n                if(mode==\"week\"){\r\n                    let weekWeather=[...weather.daily]\r\n                    weekWeather.splice(0,1)\r\n                    resolve(weekWeather)\r\n                }\r\n            })\r\n        }\r\n        else(\r\n            reject(\"ошибка\")\r\n        )\r\n\r\n\r\n    })\r\n    \r\n}","import React from 'react'\r\n\r\nexport default function SelectCityMessage() {\r\n    return (\r\n        <div className=\"page-message\">\r\n            Не выбран город\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { withRouter } from 'react-router'\r\nimport { getDayDate } from '../Scripts/date'\r\nimport {getCityName,getWeather} from \"../Scripts/weatherAPI\"\r\nimport SelectCityMessage from './SelectCityMessage'\r\nfunction Day(props) {\r\n    const [dayWeather, setDayWeather] = useState(null)\r\n    const [cityName, setCityName] = useState(null)\r\n    const [loading,setLoading]=useState(false)\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        getCityName(props.location.search).then(\r\n            (name)=>{setCityName(name)}\r\n        )\r\n        getWeather(props.location.search,\"day\").then(weather=>{setDayWeather(weather);}).finally(()=>{setLoading(false)})\r\n        \r\n            \r\n    }, [props.location.search])\r\n\r\n    if(loading){\r\n        return <div className=\"page-message\">Загрузка...</div>\r\n    }\r\n    if(!dayWeather){\r\n        return <SelectCityMessage></SelectCityMessage>\r\n    }\r\n    let dateString=getDayDate(dayWeather.dt)\r\n    return (\r\n        <div className=\"day\">\r\n            <div className=\"container\">\r\n                <div className=\"day__city-name\">{cityName}</div>\r\n                <div className=\"day__main-wrapper\">\r\n                    <img className=\"day__image\" src={`http://openweathermap.org/img/wn/${dayWeather.weather[0].icon}.png`} alt=\"\"></img>\r\n                    <div className=\"day__temp\">{Math.round(dayWeather.temp)}°C</div>\r\n                </div>\r\n                <div className=\"day__sub-wrapper\">\r\n                    <div className=\"day__sub-info\">humidity {dayWeather.humidity}%</div>\r\n                    <div className=\"day__sub-info\">feels like {Math.round(dayWeather.feels_like)}°C</div>\r\n                </div>\r\n                <div className=\"day__date\">{dateString}</div>\r\n\r\n                <div className=\"day__description\">{dayWeather.weather[0].description}</div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default withRouter(Day)","import React,{useState,useEffect} from 'react'\r\nimport { withRouter } from 'react-router'\r\nimport {getCityName,getWeather} from \"../Scripts/weatherAPI\"\r\nimport {getDayDate, getWeekDate} from \"../Scripts/date\"\r\nimport SelectCityMessage from './SelectCityMessage'\r\nfunction Week(props) {\r\n    const [weekWeather, setWeekWeather] = useState(null)\r\n    const [cityName, setCityName] = useState(false)\r\n    const [loading,setLoading]=useState(false)\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        getCityName(props.location.search).then(\r\n            (name)=>{setCityName(name)}\r\n        )\r\n        getWeather(props.location.search,\"week\").then(weather=>{setWeekWeather(weather);}).finally(()=>{setLoading(false)})    \r\n    }, [props.location.search])\r\n\r\n    console.log(weekWeather);\r\n    if(loading){\r\n        return <div className=\"page-message\">Загрузка...</div>\r\n    }\r\n    if(!weekWeather){\r\n        return <SelectCityMessage></SelectCityMessage>\r\n    }\r\n    return (\r\n        <div className=\"week\">\r\n            {weekWeather.map(day=>{\r\n                let date=getWeekDate(day.dt)\r\n                return <div className=\"week__card\">\r\n                        <div className=\"week__date-wrapper\">\r\n                            <div className=\"week__day\">{date[0]}</div>\r\n                            <div className=\"week__date\">{date[1]}</div>\r\n                            <div className=\"week__month\">{date[2]}</div>  \r\n                        </div>\r\n                        <img className=\"day__image\" src={`http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`} alt=\"\"></img>\r\n                        <div className=\"week__temp-description\">{day.weather[0].description}</div>\r\n                        <div className=\"week__temp-wrapper\">\r\n                            <div className=\"week__temp-column\">\r\n                                <div className=\"week__temp-value\">{Math.floor(day.temp.min)}</div>\r\n                                <div className=\"week__temp-title\">min</div>\r\n                            </div>\r\n                            <div className=\"week__temp-column\">\r\n                                <div className=\"week__temp-value\">{Math.floor(day.temp.max)}</div>\r\n                                <div className=\"week__temp-title\">max</div>\r\n\r\n                            </div>\r\n                            \r\n                        </div>\r\n                </div>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\nexport default withRouter(Week)","import React,{useState,useEffect} from 'react'\r\nimport { withRouter,NavLink } from 'react-router-dom'\r\nimport { getCityName, getCoords } from '../Scripts/weatherAPI'\r\nimport Selector from './Selector'\r\n\r\nfunction Header(props) {\r\n    const [cityName, setCityName] = useState(null)\r\n    const [showSelector,setShowSelector]=useState(true)\r\n    useEffect(() => {\r\n        getCityName(props.location.search)\r\n        .then(\r\n            (response)=>{setCityName(response)},\r\n            (error)=>{console.log(\"error\",error)}\r\n        )\r\n\r\n\r\n    }, [props.location.search])\r\n    return (\r\n        <header className=\"header\">\r\n                <div className=\"header__wrapper\">\r\n                    <div className=\"header__city\" onClick={()=>{setShowSelector(!showSelector)}}>{cityName?\"Сменить город\":\"Выбрать город\"} </div>\r\n                    <div  className=\"header__links\">\r\n                        <NavLink className=\"header__link\" to={\"/week\"+props.location.search}>Погода на неделю</NavLink>\r\n                        <NavLink className=\"header__link\" to={\"/day\"+props.location.search}>Погода на день</NavLink>\r\n                    </div>\r\n                </div>\r\n                {showSelector&&<Selector close={()=>{setShowSelector(false)}}></Selector>}\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default withRouter(Header)\r\n","import './App.scss';\nimport React, { useState } from \"react\"\nimport Selector from './Components/Selector';\nimport PageNotFound from './Components/PageNotFound';\nimport Day from \"./Components/Day\"\nimport Week from \"./Components/Week\"\nimport {Route, Switch, withRouter } from 'react-router';\nimport * as routes from \"./routes\"\nimport { NavLink } from 'react-router-dom';\nimport Header from './Components/Header';\nimport SelectCityMessage from './Components/SelectCityMessage';\nfunction App(props) {\n\t// const [cityName, setCityName] = useState(1)\n\t// useEffect(() => {\n\t// }, [props])\n\t// let getWeather = (city) => {\n\t// \tfetch(\n\t// \t\t// \"http://api.openweathermap.org/data/2.5/forecast?q=Kyiv&exclude=alerts&appid=b4f88a6f724b0b945af35f393ab4d22a\"\n\t// \t\t// \"http://api.openweathermap.org/data/2.5/weather?q=Kyiv&appid=b4f88a6f724b0b945af35f393ab4d22a&lang=ua\"\n\t// \t\t`https://api.openweathermap.org/data/2.5/onecall?lat=${city.lat}&lon=${city.lon}&appid=b4f88a6f724b0b945af35f393ab4d22a`\n\t// \t).then(response => {\n\t// \t\treturn response.json()\n\t// \t}).then(weather => {\n\t// \t\tconsole.log(weather);\n\t// \t}).catch(error => {\n\t// \t\tconsole.log(error.text())\n\t// \t})\n\t// }\n\t// let selectCityHandler = (city) => {\n\t// \tsetSelectCityState(city)\n\t// \tgetWeather(city)\n\t// }\n\treturn (\n\t\t<div className=\"app\">\t\n\t\t\t<Header></Header>\n\t\t\t<Switch>\n\t\t\t\t<Route path={routes.WEEK} component={Week}></Route>\n\t\t\t\t<Route path={routes.DAY}  component={Day}></Route>\n\n\t\t\t\t<Route path=\"\" component={PageNotFound}></Route>\n\t\t\t</Switch>\n\t\t</div>\n\t);\n}\n\nexport default withRouter(App);\n","export const WEEK=\"/week\"\r\nexport const DAY=\"/day\"","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router';\nimport { BrowserRouter,HashRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}