{"version":3,"sources":["Scripts/date.js","Components/ErrorMessage.js","Scripts/weatherAPI.js","Components/DayCardFull.js","Components/Week.js","Components/Selector.js","Components/Header.js","App.js","routes.js","index.js"],"names":["DAYS","MONTHS","withRouter","props","children","match","setTimeout","history","push","className","getParams","searchParams","params","URLSearchParams","lat","get","lon","city","dayWeather","console","log","dateString","time","date","Date","getDay","getDate","getMonth","getFullYear","join","getDayDate","dt","cityName","location","search","src","weather","icon","alt","Math","round","temp","day","humidity","feels_like","max","min","description","useState","selectedCard","setSelectedCard","map","dayIndex","getWeekDate","dayWeatherFull","DayCardFull","Fragment","onClick","floor","searchCities","setSearchCities","showList","setShowList","placeholder","onFocus","onChange","event","param","target","value","searchCitiesArray","length","cities","forEach","toLowerCase","replace","close","selectCity","showSelector","setShowSelector","loading","setLoading","weekWeather","setWeekWeather","error","setError","useEffect","Promise","resolve","reject","fetch","then","response","json","coord","daily","splice","catch","finally","path","render","ErrorMessage","ReactDOM","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.217ab21b.chunk.js","sourcesContent":["const DAYS = [\"Sunday\",\"Monday\", \"Tuesday\", \"Wednesday\",\r\n        \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\r\nconst MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\nexport const getDayDate=(time)=>{\r\n    let date=new Date(time*1000)\r\n    let dateString=[\r\n        DAYS[date.getDay()],\r\n        date.getDate(),\r\n        MONTHS[date.getMonth()],\r\n        date.getFullYear()\r\n    ].join(\" \")\r\n    return dateString\r\n}\r\nexport const getWeekDate=(time)=>{\r\n    let date=new Date(time*1000)\r\n\r\n    return [DAYS[date.getDay()],date.getDate(),MONTHS[date.getMonth()]]\r\n}","import React from 'react'\r\nimport { withRouter } from 'react-router'\r\n\r\nfunction SelectCityMessage(props) {\r\n    if(props.children.match(\"Page not found\")){\r\n        setTimeout(()=>{\r\n            props.history.push(\"/weather\")\r\n        },3000)\r\n    }\r\n    return (\r\n        <div className=\"page-message\">\r\n            {props.children}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(SelectCityMessage)","export const getParams=(searchParams)=>{\r\n    let params = new URLSearchParams(searchParams);\r\n    let lat = params.get(\"lat\"); \r\n    let lon = params.get(\"lon\");\r\n    let city=params.get(\"city\");\r\n    return {lat,lon,city}\r\n}\r\n\r\n\r\n\r\n\r\nexport const getWeather=(searchParams)=>{\r\n    return new Promise((resolve,reject)=>{\r\n        let {city}= getParams(searchParams)\r\n\r\n        fetch(\r\n            `https://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=b4f88a6f724b0b945af35f393ab4d22a`\r\n        )\r\n        .then(response=>response.json())\r\n        .then(coord=>{\r\n            if(coord[0]){\r\n                fetch(\r\n                    `https://api.openweathermap.org/data/2.5/onecall?lat=${coord[0].lat}&lon=${coord[0].lon}&units=metric&exclude=minutely,alerts,hourly&appid=b4f88a6f724b0b945af35f393ab4d22a`\r\n                ).then(response => {\r\n                    return response.json()\r\n                }).then(weather => {\r\n                        let weekWeather=[...weather.daily]\r\n                        weekWeather.splice(0,1)\r\n                        resolve(weekWeather)\r\n                })\r\n            }else{\r\n                reject(\"Selected city not found\")\r\n            }\r\n\r\n        }).catch(error=>{return null})\r\n    })\r\n    \r\n}","import React, { useEffect, useState } from 'react'\r\nimport { withRouter } from 'react-router'\r\nimport { getDayDate } from '../Scripts/date'\r\nimport {getParams} from \"../Scripts/weatherAPI\"\r\nfunction Day(props) {\r\n    let dayWeather=props.dayWeather\r\n    console.log(dayWeather);\r\n    let dateString=getDayDate(dayWeather.dt)\r\n    let cityName= getParams(props.location.search).city\r\n    return (\r\n        <div className=\"day__container\">\r\n            <div className=\"day\">\r\n                <div className=\"container\">\r\n                    <div className=\"day__city-name\">{cityName}</div>\r\n                    <div className=\"day__main-wrapper\">\r\n                        <img className=\"day__image\" src={`http://openweathermap.org/img/wn/${dayWeather.weather[0].icon}.png`} alt=\"\"></img>\r\n                        <div className=\"day__temp\">{Math.round(dayWeather.temp.day)}째C</div>\r\n                    </div>\r\n                    <div className=\"day__sub-wrapper\">\r\n                        <div className=\"day__sub-info\">humidity {dayWeather.humidity}%</div>\r\n                        <div className=\"day__sub-info\">feels like {Math.round(dayWeather.feels_like.day)}째C</div>\r\n                    </div>\r\n                    <div className=\"day__maxmin-wrapper\">\r\n                        <span>max {dayWeather.temp.max}째C</span>\r\n                        <span>min {dayWeather.temp.min}째C</span>\r\n                    \r\n                    </div>\r\n                    <div className=\"day__date\">{dateString}</div>\r\n\r\n                    <div className=\"day__description\">{dayWeather.weather[0].description}</div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default withRouter(Day)","import React,{useState,useEffect} from 'react'\r\nimport { withRouter } from 'react-router'\r\nimport {getWeekDate} from \"../Scripts/date\"\r\nimport SelectCityMessage from './ErrorMessage'\r\nimport DayCardFull from \"./DayCardFull\"\r\nfunction Week(props) {\r\n    const [selectedCard, setSelectedCard] = useState(null)\r\n    if(!props.weather){\r\n        return <SelectCityMessage></SelectCityMessage>\r\n    }\r\n    \r\n    return (\r\n        <div className=\"week\">\r\n            {props.weather.map((day,dayIndex)=>{\r\n                let date=getWeekDate(day.dt)\r\n                let dayWeatherFull=null \r\n                if(selectedCard && dayIndex==3){\r\n                    dayWeatherFull=<DayCardFull dayWeather={props.weather[selectedCard]}></DayCardFull>\r\n                }\r\n                return <React.Fragment>\r\n                    \r\n                    <div className=\"week__card\" onClick={()=>{setSelectedCard(dayIndex)}}>\r\n                        <div className=\"week__date-wrapper\">\r\n                            <div className=\"week__day\">{date[0]}</div>\r\n                            <div className=\"week__date\">{date[1]}</div>\r\n                            <div className=\"week__month\">{date[2]}</div>  \r\n                        </div>\r\n                        <img className=\"day__image\" src={`http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`} alt=\"\"></img>\r\n                        <div className=\"week__temp-description\">{day.weather[0].description}</div>\r\n                        <div className=\"week__temp-wrapper\">\r\n                            <div className=\"week__temp-column\">\r\n                                <div className=\"week__temp-value\">{Math.floor(day.temp.min)}</div>\r\n                                <div className=\"week__temp-title\">min</div>\r\n                            </div>\r\n                            <div className=\"week__temp-column\">\r\n                                <div className=\"week__temp-value\">{Math.floor(day.temp.max)}</div>\r\n                                <div className=\"week__temp-title\">max</div>\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n                {dayWeatherFull}\r\n                </React.Fragment>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\nexport default withRouter(Week)","import React,{useState,useEffect} from 'react'\r\nimport {withRouter} from \"react-router-dom\"\r\nimport cities from \"../Assets/cities.json\"\r\nfunction Selector(props) {\r\n    const [searchCities, setSearchCities] = useState(null)\r\n    const [showList, setShowList] = useState(null)\r\n\r\n    let selectCities=(event)=>{\r\n        let param=event.target.value\r\n        let searchCitiesArray=[]\r\n\r\n        if(param.length>2 && cities){\r\n           \r\n            cities.forEach(city=>{\r\n                if(city.toLowerCase().match(param.toLowerCase())){\r\n                    searchCitiesArray.push(city)\r\n                }\r\n            })\r\n\r\n        }\r\n        setSearchCities(searchCitiesArray)\r\n    }\r\n    let selectCity=(city)=>{\r\n        props.history.replace(\"/weather?city=\"+city)\r\n        setShowList(false)\r\n        props.close()\r\n    }\r\n\r\n\r\n    let inputRef=React.createRef()\r\n    return (\r\n        <div className=\"selector\">\r\n            <input placeholder=\"Enter the name of the city (more than 2 letters)\" className=\"selector__search\" onFocus={()=>{setShowList(true)}} onChange={selectCities}></input>    \r\n            {searchCities?.length>0&&showList&&<ul className=\"selector__cities-list\">\r\n                {searchCities.map(city=>{\r\n                    return <li className=\"selector__cities-item\" onClick={()=>{selectCity(city)}}>{city}</li>\r\n                })}\r\n            </ul>}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default withRouter(Selector)","import React,{useState,useEffect} from 'react'\r\nimport { withRouter,NavLink } from 'react-router-dom'\r\nimport { getParams } from '../Scripts/weatherAPI'\r\nimport Selector from './Selector'\r\n\r\nfunction Header(props) {\r\n    const [showSelector,setShowSelector]=useState(false)\r\n    let cityName= getParams(props.location.search).city\r\n    console.log(cityName);\r\n    return (\r\n        <header className=\"header\">\r\n                <div className=\"header__wrapper\">\r\n                    <div className=\"header__city\" onClick={()=>{setShowSelector(!showSelector)}}>{cityName?\"Change city\":\"Select city\"} </div>\r\n                    {(showSelector||!cityName)&&<Selector close={()=>{setShowSelector(false)}}></Selector>}\r\n                </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default withRouter(Header)\r\n","import './App.scss';\nimport React, { useState,useEffect } from \"react\"\nimport PageNotFound from './Components/PageNotFound'\nimport Week from \"./Components/Week\"\nimport Header from './Components/Header'\nimport ErrorMessage from \"./Components/ErrorMessage\"\n\nimport {Route, Switch, withRouter } from 'react-router'\nimport * as routes from \"./routes\"\nimport {getWeather} from \"./Scripts/weatherAPI\"\nfunction App(props) {\n\tconst [loading,setLoading]=useState(false)\n\tconst [weekWeather, setWeekWeather] = useState(null)\n\tconst [error,setError]=useState(null)\n\tuseEffect(() => {\n        setLoading(true)\n\t\tsetWeekWeather(null)\n\t\tsetError(null)\n        getWeather(props.location.search).\n\t\t\tthen(weather=>{setWeekWeather(weather)},error=>{setError(error)}).\n\t\t\tfinally(()=>{setLoading(false)}) \n    }, [props.location.search])\n\n\treturn (\n\t\t<div className=\"app\">\t\n\t\t\t<Header></Header>\n\t\t\n\t\t\t<Switch>\n\t\t\t\t<Route path={routes.WEATHER} render={()=>{\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t{weekWeather&&<Week weather={weekWeather}></Week>}\n\t\t\t\t\t\t\t{loading&& <div className=\"page-message\">Loading...</div>}\n\t\t\t\t\t\t\t{error&&<ErrorMessage>{error}</ErrorMessage>}\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t)\n\t\t\t\t}}></Route>\n\t\t\t\t<Route path=\"\" render={()=><ErrorMessage>Page not found</ErrorMessage>}></Route>\n\t\t\t</Switch>\n\t\t</div>\n\t);\n}\n\nexport default withRouter(App);\n","export const WEATHER=\"/weather-app\"","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router';\nimport { BrowserRouter,HashRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}